/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 418.0, "minX": 0.0, "maxY": 18226.0, "series": [{"data": [[0.0, 418.0], [0.1, 453.0], [0.2, 500.0], [0.3, 504.0], [0.4, 508.0], [0.5, 516.0], [0.6, 522.0], [0.7, 524.0], [0.8, 528.0], [0.9, 544.0], [1.0, 565.0], [1.1, 566.0], [1.2, 567.0], [1.3, 573.0], [1.4, 580.0], [1.5, 583.0], [1.6, 585.0], [1.7, 591.0], [1.8, 608.0], [1.9, 610.0], [2.0, 616.0], [2.1, 621.0], [2.2, 629.0], [2.3, 632.0], [2.4, 632.0], [2.5, 638.0], [2.6, 652.0], [2.7, 653.0], [2.8, 654.0], [2.9, 655.0], [3.0, 662.0], [3.1, 663.0], [3.2, 664.0], [3.3, 666.0], [3.4, 666.0], [3.5, 677.0], [3.6, 681.0], [3.7, 681.0], [3.8, 685.0], [3.9, 689.0], [4.0, 695.0], [4.1, 701.0], [4.2, 706.0], [4.3, 706.0], [4.4, 716.0], [4.5, 717.0], [4.6, 717.0], [4.7, 718.0], [4.8, 718.0], [4.9, 721.0], [5.0, 725.0], [5.1, 726.0], [5.2, 736.0], [5.3, 737.0], [5.4, 742.0], [5.5, 749.0], [5.6, 751.0], [5.7, 755.0], [5.8, 755.0], [5.9, 759.0], [6.0, 761.0], [6.1, 765.0], [6.2, 766.0], [6.3, 768.0], [6.4, 771.0], [6.5, 773.0], [6.6, 776.0], [6.7, 777.0], [6.8, 777.0], [6.9, 786.0], [7.0, 788.0], [7.1, 792.0], [7.2, 795.0], [7.3, 796.0], [7.4, 799.0], [7.5, 804.0], [7.6, 816.0], [7.7, 816.0], [7.8, 817.0], [7.9, 824.0], [8.0, 829.0], [8.1, 832.0], [8.2, 833.0], [8.3, 836.0], [8.4, 836.0], [8.5, 838.0], [8.6, 839.0], [8.7, 847.0], [8.8, 849.0], [8.9, 856.0], [9.0, 859.0], [9.1, 862.0], [9.2, 866.0], [9.3, 872.0], [9.4, 878.0], [9.5, 885.0], [9.6, 886.0], [9.7, 888.0], [9.8, 891.0], [9.9, 898.0], [10.0, 899.0], [10.1, 907.0], [10.2, 908.0], [10.3, 913.0], [10.4, 917.0], [10.5, 919.0], [10.6, 924.0], [10.7, 928.0], [10.8, 934.0], [10.9, 938.0], [11.0, 943.0], [11.1, 943.0], [11.2, 944.0], [11.3, 949.0], [11.4, 954.0], [11.5, 956.0], [11.6, 960.0], [11.7, 963.0], [11.8, 963.0], [11.9, 964.0], [12.0, 965.0], [12.1, 972.0], [12.2, 973.0], [12.3, 975.0], [12.4, 975.0], [12.5, 977.0], [12.6, 978.0], [12.7, 980.0], [12.8, 981.0], [12.9, 981.0], [13.0, 984.0], [13.1, 985.0], [13.2, 988.0], [13.3, 991.0], [13.4, 999.0], [13.5, 1001.0], [13.6, 1005.0], [13.7, 1009.0], [13.8, 1014.0], [13.9, 1014.0], [14.0, 1026.0], [14.1, 1027.0], [14.2, 1030.0], [14.3, 1032.0], [14.4, 1037.0], [14.5, 1039.0], [14.6, 1046.0], [14.7, 1056.0], [14.8, 1059.0], [14.9, 1063.0], [15.0, 1063.0], [15.1, 1065.0], [15.2, 1066.0], [15.3, 1068.0], [15.4, 1076.0], [15.5, 1076.0], [15.6, 1078.0], [15.7, 1082.0], [15.8, 1082.0], [15.9, 1084.0], [16.0, 1088.0], [16.1, 1088.0], [16.2, 1094.0], [16.3, 1097.0], [16.4, 1107.0], [16.5, 1107.0], [16.6, 1116.0], [16.7, 1121.0], [16.8, 1126.0], [16.9, 1130.0], [17.0, 1132.0], [17.1, 1135.0], [17.2, 1137.0], [17.3, 1146.0], [17.4, 1149.0], [17.5, 1154.0], [17.6, 1162.0], [17.7, 1163.0], [17.8, 1164.0], [17.9, 1164.0], [18.0, 1165.0], [18.1, 1172.0], [18.2, 1177.0], [18.3, 1181.0], [18.4, 1182.0], [18.5, 1182.0], [18.6, 1189.0], [18.7, 1189.0], [18.8, 1191.0], [18.9, 1193.0], [19.0, 1211.0], [19.1, 1215.0], [19.2, 1219.0], [19.3, 1219.0], [19.4, 1220.0], [19.5, 1225.0], [19.6, 1226.0], [19.7, 1228.0], [19.8, 1230.0], [19.9, 1235.0], [20.0, 1240.0], [20.1, 1242.0], [20.2, 1243.0], [20.3, 1249.0], [20.4, 1253.0], [20.5, 1259.0], [20.6, 1259.0], [20.7, 1262.0], [20.8, 1262.0], [20.9, 1263.0], [21.0, 1269.0], [21.1, 1271.0], [21.2, 1273.0], [21.3, 1275.0], [21.4, 1277.0], [21.5, 1278.0], [21.6, 1285.0], [21.7, 1286.0], [21.8, 1288.0], [21.9, 1292.0], [22.0, 1294.0], [22.1, 1294.0], [22.2, 1297.0], [22.3, 1298.0], [22.4, 1301.0], [22.5, 1305.0], [22.6, 1308.0], [22.7, 1313.0], [22.8, 1314.0], [22.9, 1326.0], [23.0, 1332.0], [23.1, 1332.0], [23.2, 1335.0], [23.3, 1339.0], [23.4, 1345.0], [23.5, 1347.0], [23.6, 1350.0], [23.7, 1351.0], [23.8, 1357.0], [23.9, 1364.0], [24.0, 1366.0], [24.1, 1367.0], [24.2, 1371.0], [24.3, 1372.0], [24.4, 1375.0], [24.5, 1377.0], [24.6, 1380.0], [24.7, 1383.0], [24.8, 1384.0], [24.9, 1397.0], [25.0, 1398.0], [25.1, 1401.0], [25.2, 1405.0], [25.3, 1410.0], [25.4, 1412.0], [25.5, 1412.0], [25.6, 1416.0], [25.7, 1424.0], [25.8, 1427.0], [25.9, 1443.0], [26.0, 1454.0], [26.1, 1454.0], [26.2, 1460.0], [26.3, 1464.0], [26.4, 1468.0], [26.5, 1476.0], [26.6, 1480.0], [26.7, 1483.0], [26.8, 1490.0], [26.9, 1491.0], [27.0, 1498.0], [27.1, 1506.0], [27.2, 1508.0], [27.3, 1510.0], [27.4, 1512.0], [27.5, 1513.0], [27.6, 1523.0], [27.7, 1523.0], [27.8, 1528.0], [27.9, 1528.0], [28.0, 1532.0], [28.1, 1534.0], [28.2, 1539.0], [28.3, 1542.0], [28.4, 1543.0], [28.5, 1545.0], [28.6, 1545.0], [28.7, 1546.0], [28.8, 1549.0], [28.9, 1550.0], [29.0, 1551.0], [29.1, 1553.0], [29.2, 1554.0], [29.3, 1560.0], [29.4, 1568.0], [29.5, 1572.0], [29.6, 1574.0], [29.7, 1574.0], [29.8, 1575.0], [29.9, 1578.0], [30.0, 1585.0], [30.1, 1586.0], [30.2, 1587.0], [30.3, 1592.0], [30.4, 1594.0], [30.5, 1596.0], [30.6, 1605.0], [30.7, 1605.0], [30.8, 1616.0], [30.9, 1623.0], [31.0, 1632.0], [31.1, 1641.0], [31.2, 1643.0], [31.3, 1643.0], [31.4, 1648.0], [31.5, 1653.0], [31.6, 1653.0], [31.7, 1654.0], [31.8, 1657.0], [31.9, 1674.0], [32.0, 1674.0], [32.1, 1675.0], [32.2, 1676.0], [32.3, 1676.0], [32.4, 1679.0], [32.5, 1682.0], [32.6, 1683.0], [32.7, 1688.0], [32.8, 1694.0], [32.9, 1694.0], [33.0, 1697.0], [33.1, 1701.0], [33.2, 1712.0], [33.3, 1715.0], [33.4, 1720.0], [33.5, 1722.0], [33.6, 1730.0], [33.7, 1732.0], [33.8, 1737.0], [33.9, 1738.0], [34.0, 1738.0], [34.1, 1739.0], [34.2, 1741.0], [34.3, 1741.0], [34.4, 1747.0], [34.5, 1750.0], [34.6, 1751.0], [34.7, 1761.0], [34.8, 1762.0], [34.9, 1763.0], [35.0, 1769.0], [35.1, 1773.0], [35.2, 1773.0], [35.3, 1777.0], [35.4, 1805.0], [35.5, 1806.0], [35.6, 1806.0], [35.7, 1806.0], [35.8, 1809.0], [35.9, 1813.0], [36.0, 1814.0], [36.1, 1818.0], [36.2, 1821.0], [36.3, 1828.0], [36.4, 1835.0], [36.5, 1839.0], [36.6, 1842.0], [36.7, 1848.0], [36.8, 1849.0], [36.9, 1850.0], [37.0, 1851.0], [37.1, 1853.0], [37.2, 1864.0], [37.3, 1867.0], [37.4, 1867.0], [37.5, 1871.0], [37.6, 1883.0], [37.7, 1890.0], [37.8, 1897.0], [37.9, 1900.0], [38.0, 1901.0], [38.1, 1902.0], [38.2, 1909.0], [38.3, 1916.0], [38.4, 1918.0], [38.5, 1923.0], [38.6, 1924.0], [38.7, 1924.0], [38.8, 1928.0], [38.9, 1929.0], [39.0, 1929.0], [39.1, 1933.0], [39.2, 1934.0], [39.3, 1934.0], [39.4, 1935.0], [39.5, 1938.0], [39.6, 1941.0], [39.7, 1955.0], [39.8, 1956.0], [39.9, 1958.0], [40.0, 1968.0], [40.1, 1975.0], [40.2, 1975.0], [40.3, 1979.0], [40.4, 1987.0], [40.5, 1994.0], [40.6, 1997.0], [40.7, 2000.0], [40.8, 2012.0], [40.9, 2013.0], [41.0, 2019.0], [41.1, 2021.0], [41.2, 2022.0], [41.3, 2027.0], [41.4, 2028.0], [41.5, 2034.0], [41.6, 2040.0], [41.7, 2041.0], [41.8, 2045.0], [41.9, 2048.0], [42.0, 2049.0], [42.1, 2061.0], [42.2, 2063.0], [42.3, 2075.0], [42.4, 2076.0], [42.5, 2078.0], [42.6, 2089.0], [42.7, 2089.0], [42.8, 2091.0], [42.9, 2094.0], [43.0, 2096.0], [43.1, 2103.0], [43.2, 2110.0], [43.3, 2113.0], [43.4, 2122.0], [43.5, 2124.0], [43.6, 2136.0], [43.7, 2138.0], [43.8, 2145.0], [43.9, 2146.0], [44.0, 2157.0], [44.1, 2166.0], [44.2, 2171.0], [44.3, 2173.0], [44.4, 2174.0], [44.5, 2178.0], [44.6, 2185.0], [44.7, 2195.0], [44.8, 2197.0], [44.9, 2202.0], [45.0, 2208.0], [45.1, 2214.0], [45.2, 2216.0], [45.3, 2218.0], [45.4, 2223.0], [45.5, 2223.0], [45.6, 2229.0], [45.7, 2246.0], [45.8, 2246.0], [45.9, 2253.0], [46.0, 2264.0], [46.1, 2265.0], [46.2, 2268.0], [46.3, 2282.0], [46.4, 2284.0], [46.5, 2286.0], [46.6, 2296.0], [46.7, 2298.0], [46.8, 2298.0], [46.9, 2301.0], [47.0, 2304.0], [47.1, 2305.0], [47.2, 2308.0], [47.3, 2318.0], [47.4, 2329.0], [47.5, 2337.0], [47.6, 2339.0], [47.7, 2339.0], [47.8, 2343.0], [47.9, 2348.0], [48.0, 2352.0], [48.1, 2352.0], [48.2, 2357.0], [48.3, 2371.0], [48.4, 2371.0], [48.5, 2376.0], [48.6, 2377.0], [48.7, 2385.0], [48.8, 2387.0], [48.9, 2395.0], [49.0, 2402.0], [49.1, 2402.0], [49.2, 2418.0], [49.3, 2455.0], [49.4, 2457.0], [49.5, 2459.0], [49.6, 2473.0], [49.7, 2502.0], [49.8, 2504.0], [49.9, 2506.0], [50.0, 2512.0], [50.1, 2520.0], [50.2, 2531.0], [50.3, 2535.0], [50.4, 2539.0], [50.5, 2541.0], [50.6, 2555.0], [50.7, 2560.0], [50.8, 2563.0], [50.9, 2572.0], [51.0, 2574.0], [51.1, 2581.0], [51.2, 2591.0], [51.3, 2605.0], [51.4, 2609.0], [51.5, 2610.0], [51.6, 2630.0], [51.7, 2648.0], [51.8, 2660.0], [51.9, 2662.0], [52.0, 2665.0], [52.1, 2675.0], [52.2, 2687.0], [52.3, 2696.0], [52.4, 2707.0], [52.5, 2713.0], [52.6, 2756.0], [52.7, 2812.0], [52.8, 2820.0], [52.9, 2829.0], [53.0, 2838.0], [53.1, 2858.0], [53.2, 2866.0], [53.3, 2885.0], [53.4, 2918.0], [53.5, 2941.0], [53.6, 2961.0], [53.7, 2962.0], [53.8, 2962.0], [53.9, 2965.0], [54.0, 2971.0], [54.1, 2972.0], [54.2, 2973.0], [54.3, 2973.0], [54.4, 3011.0], [54.5, 3012.0], [54.6, 3016.0], [54.7, 3055.0], [54.8, 3072.0], [54.9, 3093.0], [55.0, 3102.0], [55.1, 3104.0], [55.2, 3127.0], [55.3, 3159.0], [55.4, 3161.0], [55.5, 3168.0], [55.6, 3175.0], [55.7, 3176.0], [55.8, 3192.0], [55.9, 3194.0], [56.0, 3201.0], [56.1, 3204.0], [56.2, 3221.0], [56.3, 3222.0], [56.4, 3228.0], [56.5, 3239.0], [56.6, 3243.0], [56.7, 3264.0], [56.8, 3276.0], [56.9, 3294.0], [57.0, 3313.0], [57.1, 3313.0], [57.2, 3317.0], [57.3, 3326.0], [57.4, 3326.0], [57.5, 3329.0], [57.6, 3329.0], [57.7, 3330.0], [57.8, 3371.0], [57.9, 3374.0], [58.0, 3378.0], [58.1, 3398.0], [58.2, 3399.0], [58.3, 3402.0], [58.4, 3420.0], [58.5, 3433.0], [58.6, 3438.0], [58.7, 3449.0], [58.8, 3460.0], [58.9, 3476.0], [59.0, 3478.0], [59.1, 3485.0], [59.2, 3495.0], [59.3, 3516.0], [59.4, 3521.0], [59.5, 3523.0], [59.6, 3530.0], [59.7, 3531.0], [59.8, 3570.0], [59.9, 3585.0], [60.0, 3592.0], [60.1, 3593.0], [60.2, 3608.0], [60.3, 3618.0], [60.4, 3634.0], [60.5, 3639.0], [60.6, 3660.0], [60.7, 3660.0], [60.8, 3669.0], [60.9, 3672.0], [61.0, 3695.0], [61.1, 3704.0], [61.2, 3737.0], [61.3, 3785.0], [61.4, 3799.0], [61.5, 3801.0], [61.6, 3809.0], [61.7, 3823.0], [61.8, 3829.0], [61.9, 3857.0], [62.0, 3873.0], [62.1, 3894.0], [62.2, 3896.0], [62.3, 3900.0], [62.4, 3917.0], [62.5, 3924.0], [62.6, 3939.0], [62.7, 3957.0], [62.8, 3959.0], [62.9, 3969.0], [63.0, 4002.0], [63.1, 4009.0], [63.2, 4011.0], [63.3, 4012.0], [63.4, 4025.0], [63.5, 4039.0], [63.6, 4065.0], [63.7, 4072.0], [63.8, 4100.0], [63.9, 4111.0], [64.0, 4117.0], [64.1, 4122.0], [64.2, 4132.0], [64.3, 4170.0], [64.4, 4186.0], [64.5, 4190.0], [64.6, 4197.0], [64.7, 4227.0], [64.8, 4234.0], [64.9, 4259.0], [65.0, 4271.0], [65.1, 4292.0], [65.2, 4300.0], [65.3, 4310.0], [65.4, 4317.0], [65.5, 4327.0], [65.6, 4351.0], [65.7, 4384.0], [65.8, 4385.0], [65.9, 4461.0], [66.0, 4471.0], [66.1, 4480.0], [66.2, 4480.0], [66.3, 4485.0], [66.4, 4500.0], [66.5, 4504.0], [66.6, 4507.0], [66.7, 4511.0], [66.8, 4512.0], [66.9, 4537.0], [67.0, 4542.0], [67.1, 4555.0], [67.2, 4559.0], [67.3, 4575.0], [67.4, 4589.0], [67.5, 4598.0], [67.6, 4600.0], [67.7, 4604.0], [67.8, 4616.0], [67.9, 4623.0], [68.0, 4631.0], [68.1, 4637.0], [68.2, 4671.0], [68.3, 4674.0], [68.4, 4675.0], [68.5, 4685.0], [68.6, 4686.0], [68.7, 4698.0], [68.8, 4714.0], [68.9, 4720.0], [69.0, 4748.0], [69.1, 4753.0], [69.2, 4784.0], [69.3, 4786.0], [69.4, 4809.0], [69.5, 4812.0], [69.6, 4812.0], [69.7, 4840.0], [69.8, 4841.0], [69.9, 4859.0], [70.0, 4885.0], [70.1, 4885.0], [70.2, 4887.0], [70.3, 4888.0], [70.4, 4889.0], [70.5, 4900.0], [70.6, 4900.0], [70.7, 4917.0], [70.8, 4918.0], [70.9, 4920.0], [71.0, 4946.0], [71.1, 4962.0], [71.2, 4969.0], [71.3, 4969.0], [71.4, 4990.0], [71.5, 4993.0], [71.6, 5002.0], [71.7, 5014.0], [71.8, 5031.0], [71.9, 5034.0], [72.0, 5053.0], [72.1, 5056.0], [72.2, 5070.0], [72.3, 5083.0], [72.4, 5085.0], [72.5, 5105.0], [72.6, 5109.0], [72.7, 5114.0], [72.8, 5118.0], [72.9, 5127.0], [73.0, 5156.0], [73.1, 5177.0], [73.2, 5181.0], [73.3, 5194.0], [73.4, 5225.0], [73.5, 5225.0], [73.6, 5225.0], [73.7, 5231.0], [73.8, 5245.0], [73.9, 5251.0], [74.0, 5254.0], [74.1, 5264.0], [74.2, 5276.0], [74.3, 5281.0], [74.4, 5287.0], [74.5, 5289.0], [74.6, 5289.0], [74.7, 5289.0], [74.8, 5297.0], [74.9, 5298.0], [75.0, 5303.0], [75.1, 5320.0], [75.2, 5327.0], [75.3, 5333.0], [75.4, 5339.0], [75.5, 5351.0], [75.6, 5364.0], [75.7, 5371.0], [75.8, 5378.0], [75.9, 5397.0], [76.0, 5405.0], [76.1, 5407.0], [76.2, 5408.0], [76.3, 5470.0], [76.4, 5482.0], [76.5, 5485.0], [76.6, 5494.0], [76.7, 5505.0], [76.8, 5512.0], [76.9, 5513.0], [77.0, 5513.0], [77.1, 5519.0], [77.2, 5525.0], [77.3, 5529.0], [77.4, 5531.0], [77.5, 5534.0], [77.6, 5576.0], [77.7, 5577.0], [77.8, 5580.0], [77.9, 5595.0], [78.0, 5608.0], [78.1, 5612.0], [78.2, 5612.0], [78.3, 5621.0], [78.4, 5626.0], [78.5, 5632.0], [78.6, 5636.0], [78.7, 5637.0], [78.8, 5640.0], [78.9, 5643.0], [79.0, 5646.0], [79.1, 5650.0], [79.2, 5651.0], [79.3, 5652.0], [79.4, 5657.0], [79.5, 5664.0], [79.6, 5670.0], [79.7, 5671.0], [79.8, 5677.0], [79.9, 5685.0], [80.0, 5691.0], [80.1, 5703.0], [80.2, 5750.0], [80.3, 5791.0], [80.4, 5793.0], [80.5, 5800.0], [80.6, 5825.0], [80.7, 5827.0], [80.8, 5838.0], [80.9, 5841.0], [81.0, 5853.0], [81.1, 5882.0], [81.2, 5894.0], [81.3, 5899.0], [81.4, 5908.0], [81.5, 5917.0], [81.6, 5920.0], [81.7, 5922.0], [81.8, 5927.0], [81.9, 5948.0], [82.0, 5986.0], [82.1, 5986.0], [82.2, 5989.0], [82.3, 5999.0], [82.4, 6005.0], [82.5, 6015.0], [82.6, 6023.0], [82.7, 6033.0], [82.8, 6035.0], [82.9, 6071.0], [83.0, 6079.0], [83.1, 6080.0], [83.2, 6133.0], [83.3, 6141.0], [83.4, 6153.0], [83.5, 6170.0], [83.6, 6176.0], [83.7, 6219.0], [83.8, 6259.0], [83.9, 6274.0], [84.0, 6293.0], [84.1, 6295.0], [84.2, 6328.0], [84.3, 6339.0], [84.4, 6341.0], [84.5, 6359.0], [84.6, 6360.0], [84.7, 6363.0], [84.8, 6369.0], [84.9, 6370.0], [85.0, 6374.0], [85.1, 6438.0], [85.2, 6459.0], [85.3, 6463.0], [85.4, 6497.0], [85.5, 6505.0], [85.6, 6512.0], [85.7, 6549.0], [85.8, 6575.0], [85.9, 6582.0], [86.0, 6595.0], [86.1, 6611.0], [86.2, 6623.0], [86.3, 6681.0], [86.4, 6701.0], [86.5, 6703.0], [86.6, 6703.0], [86.7, 6712.0], [86.8, 6727.0], [86.9, 6743.0], [87.0, 6747.0], [87.1, 6842.0], [87.2, 6863.0], [87.3, 6945.0], [87.4, 6958.0], [87.5, 6990.0], [87.6, 6994.0], [87.7, 7032.0], [87.8, 7058.0], [87.9, 7159.0], [88.0, 7214.0], [88.1, 7222.0], [88.2, 7229.0], [88.3, 7231.0], [88.4, 7240.0], [88.5, 7257.0], [88.6, 7262.0], [88.7, 7266.0], [88.8, 7327.0], [88.9, 7340.0], [89.0, 7356.0], [89.1, 7361.0], [89.2, 7428.0], [89.3, 7479.0], [89.4, 7494.0], [89.5, 7546.0], [89.6, 7586.0], [89.7, 7600.0], [89.8, 7644.0], [89.9, 7683.0], [90.0, 7695.0], [90.1, 7712.0], [90.2, 7757.0], [90.3, 7774.0], [90.4, 7844.0], [90.5, 7850.0], [90.6, 7878.0], [90.7, 7942.0], [90.8, 7944.0], [90.9, 7952.0], [91.0, 7960.0], [91.1, 7961.0], [91.2, 7963.0], [91.3, 7965.0], [91.4, 7976.0], [91.5, 8022.0], [91.6, 8024.0], [91.7, 8063.0], [91.8, 8076.0], [91.9, 8077.0], [92.0, 8125.0], [92.1, 8154.0], [92.2, 8175.0], [92.3, 8280.0], [92.4, 8305.0], [92.5, 8325.0], [92.6, 8329.0], [92.7, 8361.0], [92.8, 8364.0], [92.9, 8384.0], [93.0, 8388.0], [93.1, 8414.0], [93.2, 8481.0], [93.3, 8489.0], [93.4, 8494.0], [93.5, 8514.0], [93.6, 8526.0], [93.7, 8531.0], [93.8, 8534.0], [93.9, 8587.0], [94.0, 8681.0], [94.1, 8802.0], [94.2, 8915.0], [94.3, 8948.0], [94.4, 8983.0], [94.5, 9135.0], [94.6, 9170.0], [94.7, 9183.0], [94.8, 9197.0], [94.9, 9244.0], [95.0, 9364.0], [95.1, 9569.0], [95.2, 9690.0], [95.3, 9744.0], [95.4, 9801.0], [95.5, 9862.0], [95.6, 9956.0], [95.7, 10060.0], [95.8, 10090.0], [95.9, 10244.0], [96.0, 10298.0], [96.1, 10304.0], [96.2, 10329.0], [96.3, 10343.0], [96.4, 10363.0], [96.5, 10366.0], [96.6, 10572.0], [96.7, 10612.0], [96.8, 10652.0], [96.9, 10739.0], [97.0, 10774.0], [97.1, 10787.0], [97.2, 10797.0], [97.3, 10834.0], [97.4, 10955.0], [97.5, 11050.0], [97.6, 11166.0], [97.7, 11298.0], [97.8, 11306.0], [97.9, 11341.0], [98.0, 11346.0], [98.1, 11387.0], [98.2, 11409.0], [98.3, 11453.0], [98.4, 11455.0], [98.5, 11469.0], [98.6, 11476.0], [98.7, 11487.0], [98.8, 11503.0], [98.9, 11545.0], [99.0, 11677.0], [99.1, 11709.0], [99.2, 12220.0], [99.3, 13002.0], [99.4, 13239.0], [99.5, 13441.0], [99.6, 14179.0], [99.7, 14383.0], [99.8, 15445.0], [99.9, 16778.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 39.0, "series": [{"data": [[400.0, 2.0], [500.0, 18.0], [600.0, 25.0], [700.0, 38.0], [800.0, 29.0], [900.0, 38.0], [1000.0, 32.0], [1100.0, 30.0], [1200.0, 37.0], [1300.0, 30.0], [1400.0, 23.0], [1500.0, 39.0], [1600.0, 28.0], [1700.0, 26.0], [1800.0, 27.0], [1900.0, 32.0], [2000.0, 26.0], [2100.0, 20.0], [2300.0, 23.0], [2200.0, 23.0], [2400.0, 8.0], [2500.0, 18.0], [2600.0, 12.0], [2800.0, 7.0], [2700.0, 4.0], [2900.0, 12.0], [3000.0, 6.0], [3100.0, 11.0], [3300.0, 14.0], [3200.0, 12.0], [3400.0, 11.0], [3500.0, 10.0], [3600.0, 10.0], [3700.0, 5.0], [3800.0, 9.0], [3900.0, 8.0], [4000.0, 9.0], [4100.0, 9.0], [4200.0, 6.0], [4300.0, 8.0], [4500.0, 13.0], [4400.0, 6.0], [4600.0, 13.0], [4800.0, 12.0], [4700.0, 7.0], [5000.0, 11.0], [4900.0, 12.0], [5100.0, 10.0], [5200.0, 17.0], [5300.0, 12.0], [5400.0, 7.0], [5500.0, 15.0], [5600.0, 23.0], [5800.0, 10.0], [5700.0, 5.0], [5900.0, 11.0], [6100.0, 6.0], [6000.0, 9.0], [6300.0, 10.0], [6200.0, 5.0], [6600.0, 4.0], [6500.0, 6.0], [6400.0, 5.0], [6900.0, 4.0], [6700.0, 8.0], [6800.0, 2.0], [7000.0, 2.0], [7100.0, 2.0], [7400.0, 3.0], [7200.0, 8.0], [7300.0, 5.0], [7500.0, 3.0], [7600.0, 4.0], [7700.0, 3.0], [7900.0, 9.0], [7800.0, 4.0], [8100.0, 4.0], [8000.0, 5.0], [8200.0, 1.0], [8300.0, 7.0], [8500.0, 5.0], [8400.0, 5.0], [8600.0, 2.0], [8900.0, 3.0], [9100.0, 4.0], [8800.0, 1.0], [9200.0, 2.0], [9600.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9300.0, 1.0], [9900.0, 2.0], [9800.0, 2.0], [10200.0, 2.0], [10000.0, 2.0], [10600.0, 2.0], [10700.0, 4.0], [10300.0, 5.0], [10400.0, 1.0], [10500.0, 1.0], [10900.0, 2.0], [11200.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11400.0, 7.0], [11500.0, 2.0], [11300.0, 4.0], [11600.0, 1.0], [11700.0, 1.0], [12100.0, 1.0], [12200.0, 1.0], [13000.0, 1.0], [13200.0, 1.0], [13400.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [15400.0, 1.0], [16700.0, 1.0], [18200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 786.0, "series": [{"data": [[0.0, 3.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 299.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 786.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 28.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 338.82258064516134, "minX": 1.60319172E12, "maxY": 338.82258064516134, "series": [{"data": [[1.60319172E12, 338.82258064516134]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group - Spike", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319172E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 461.0, "minX": 1.0, "maxY": 18226.0, "series": [{"data": [[2.0, 16778.0], [3.0, 14383.0], [4.0, 15445.0], [5.0, 11409.0], [6.0, 11050.0], [8.0, 12576.5], [9.0, 8587.0], [10.0, 10572.0], [11.0, 8384.0], [12.0, 13239.0], [13.0, 7960.0], [14.0, 13002.0], [15.0, 7644.0], [16.0, 11545.0], [17.0, 11306.0], [18.0, 10834.0], [19.0, 11487.0], [20.0, 5225.0], [21.0, 11387.0], [22.0, 13441.0], [23.0, 7965.0], [24.0, 6994.0], [25.0, 11709.0], [26.0, 7361.0], [27.0, 11677.0], [28.0, 7229.0], [29.0, 11469.0], [30.0, 11429.0], [31.0, 6623.0], [33.0, 6549.0], [32.0, 3485.0], [35.0, 7428.0], [34.0, 10797.0], [37.0, 4009.0], [36.0, 10739.0], [39.0, 3819.5], [41.0, 9353.5], [43.0, 9862.0], [42.0, 6353.0], [45.0, 5289.0], [44.0, 2662.0], [47.0, 11166.0], [46.0, 5231.0], [49.0, 12220.0], [48.0, 5378.0], [51.0, 9956.0], [50.0, 4310.0], [53.0, 2377.0], [52.0, 10774.0], [55.0, 6023.0], [54.0, 11453.0], [57.0, 12107.0], [56.0, 11346.0], [59.0, 8948.0], [58.0, 11298.0], [61.0, 7260.5], [63.0, 2253.0], [62.0, 10363.0], [67.0, 10090.0], [66.0, 5882.0], [65.0, 5612.0], [64.0, 5920.0], [71.0, 5665.0], [69.0, 10304.0], [68.0, 10366.0], [75.0, 11341.0], [74.0, 7340.0], [73.0, 5612.0], [72.0, 3317.0], [79.0, 5576.0], [78.0, 3957.0], [77.0, 5577.0], [76.0, 7969.0], [83.0, 5791.0], [82.0, 11455.0], [81.0, 11503.0], [80.0, 5657.0], [84.0, 3048.0], [87.0, 8634.5], [85.0, 5800.0], [90.0, 5582.5], [88.0, 10489.0], [93.0, 654.5], [95.0, 2059.5], [94.0, 4719.5], [92.0, 8080.0], [98.0, 4019.6666666666665], [99.0, 5651.0], [97.0, 10343.0], [96.0, 5511.0], [103.0, 5736.0], [102.0, 7444.5], [100.0, 5703.0], [107.0, 3478.0], [106.0, 6015.0], [105.0, 7133.0], [111.0, 3326.0], [110.0, 3433.0], [109.0, 6191.0], [108.0, 7592.0], [113.0, 1968.5], [115.0, 3228.0], [114.0, 9744.0], [112.0, 6360.0], [119.0, 5964.0], [118.0, 5194.0], [117.0, 2371.0], [116.0, 10329.0], [121.0, 2851.0], [123.0, 7695.0], [122.0, 5671.0], [120.0, 2304.0], [127.0, 4851.0], [126.0, 8364.0], [125.0, 3399.0], [124.0, 7844.0], [128.0, 3311.0], [129.0, 4452.0], [134.0, 5687.0], [135.0, 2959.666666666667], [133.0, 5632.0], [132.0, 5838.0], [131.0, 6475.5], [136.0, 878.0], [143.0, 5580.0], [142.0, 5313.0], [141.0, 6512.0], [140.0, 8681.0], [139.0, 9801.0], [138.0, 4613.666666666667], [146.0, 2285.333333333333], [151.0, 5298.0], [150.0, 4721.5], [148.0, 9381.5], [145.0, 676.0], [144.0, 9228.0], [153.0, 710.0], [156.0, 4504.5], [158.0, 7583.666666666667], [154.0, 2959.5], [152.0, 516.0], [160.0, 875.5], [162.0, 3033.5], [163.0, 963.5], [165.0, 706.0], [167.0, 5861.25], [164.0, 5393.0], [161.0, 5207.666666666666], [169.0, 765.0], [171.0, 859.6666666666666], [175.0, 5225.0], [174.0, 5966.0], [170.0, 2138.5], [168.0, 7952.0], [180.0, 3116.6666666666665], [183.0, 2767.2], [179.0, 5287.0], [178.0, 975.0], [177.0, 3924.0], [176.0, 795.0], [186.0, 1505.0], [191.0, 7865.0], [190.0, 1350.0], [189.0, 9569.0], [188.0, 461.0], [185.0, 5718.0], [199.0, 867.5], [198.0, 1286.0], [197.0, 817.5], [195.0, 522.0], [193.0, 541.0], [192.0, 528.0], [203.0, 2843.333333333333], [204.0, 866.0], [206.0, 856.0], [205.0, 648.5], [202.0, 776.0], [201.0, 4525.0], [215.0, 1556.0], [214.0, 632.0], [213.0, 1259.0], [212.0, 651.0], [211.0, 4327.0], [210.0, 4887.0], [209.0, 1332.0], [208.0, 2791.5], [217.0, 3487.25], [221.0, 1827.5], [223.0, 963.0], [222.0, 597.0], [220.0, 5190.0], [219.0, 1288.0], [218.0, 632.0], [226.0, 690.5], [228.0, 1628.0], [229.0, 667.5], [230.0, 3485.0], [231.0, 717.0], [227.0, 817.0], [225.0, 9960.0], [224.0, 3390.5], [232.0, 885.0], [235.0, 894.0], [239.0, 788.0], [238.0, 1259.0], [237.0, 5927.0], [236.0, 2711.0], [234.0, 8154.0], [233.0, 749.0], [242.0, 1605.0], [247.0, 2385.0], [246.0, 1335.5], [245.0, 3829.5], [244.0, 7961.0], [243.0, 6176.0], [241.0, 681.0], [240.0, 8022.0], [250.0, 1464.0], [255.0, 4012.0], [254.0, 6703.0], [253.0, 4301.0], [252.0, 6712.0], [251.0, 1409.0], [249.0, 1738.0], [248.0, 4900.0], [268.0, 3258.3333333333335], [259.0, 1652.5], [258.0, 799.0], [257.0, 6161.0], [256.0, 8802.0], [260.0, 1709.5], [262.0, 1578.0], [261.0, 891.0], [263.0, 889.5], [264.0, 1136.5], [271.0, 898.0], [270.0, 3915.0], [267.0, 4969.0], [266.0, 3762.4], [284.0, 4699.0], [273.0, 1804.0], [279.0, 1089.5], [278.0, 956.0], [277.0, 5630.0], [276.0, 7991.0], [274.0, 1173.0], [275.0, 888.0], [282.0, 931.5], [281.0, 7825.0], [285.0, 2629.5], [287.0, 1496.5], [286.0, 970.0], [283.0, 1162.0], [301.0, 1389.0], [290.0, 3120.25], [293.0, 1050.0], [292.0, 1805.0], [296.0, 1105.6666666666667], [300.0, 8494.0], [291.0, 1182.0], [299.0, 4744.0], [298.0, 5295.0], [297.0, 3214.5], [295.0, 1890.0], [289.0, 1935.0], [288.0, 6079.0], [294.0, 8024.0], [318.0, 5132.0], [306.0, 1026.0], [308.0, 1938.0], [309.0, 1126.0], [311.0, 1403.3333333333333], [305.0, 1591.0], [304.0, 2741.2], [310.0, 4377.5], [315.0, 621.0], [316.0, 4034.0], [307.0, 3112.0], [319.0, 2597.8888888888887], [317.0, 1568.0], [314.0, 3873.0], [313.0, 6747.0], [312.0, 2419.0], [332.0, 2163.5], [320.0, 3286.25], [323.0, 1313.5], [322.0, 1572.0], [321.0, 1313.0], [326.0, 3579.5], [325.0, 9690.0], [324.0, 6622.666666666667], [327.0, 1424.0], [333.0, 1671.0], [335.0, 5534.0], [328.0, 8489.0], [334.0, 1335.0], [331.0, 2494.0], [329.0, 8481.0], [348.0, 4104.5], [344.0, 2842.0], [341.0, 1613.75], [340.0, 6459.0], [345.0, 3119.0], [350.0, 2246.0], [349.0, 3961.1111111111113], [347.0, 6505.0], [346.0, 3049.0], [343.0, 5507.75], [337.0, 1909.0], [339.0, 7032.0], [338.0, 3119.5], [366.0, 3152.6666666666665], [353.0, 2502.0], [354.0, 4635.5], [355.0, 3926.5], [356.0, 4814.0], [357.0, 4360.0], [359.0, 7942.0], [352.0, 3517.75], [358.0, 1427.0], [360.0, 3687.6666666666665], [362.0, 4487.333333333333], [361.0, 1426.5], [363.0, 3371.0], [367.0, 1629.5], [365.0, 8175.0], [364.0, 9197.0], [382.0, 1741.5], [374.0, 1880.625], [373.0, 1706.5], [372.0, 2449.0], [375.0, 3041.333333333333], [383.0, 1532.0], [381.0, 6497.0], [380.0, 1867.0], [371.0, 1987.0], [370.0, 3857.0], [369.0, 5342.5], [368.0, 3221.0], [379.0, 3584.75], [378.0, 6863.0], [377.0, 1829.0], [376.0, 2056.5], [396.0, 2615.3333333333335], [386.0, 1785.3333333333333], [385.0, 5850.666666666667], [387.0, 4227.0], [395.0, 3722.0], [399.0, 3449.666666666667], [398.0, 5407.0], [397.0, 1560.0], [394.0, 4959.333333333333], [391.0, 3278.5], [390.0, 1748.5], [389.0, 2692.5], [388.0, 4982.0], [413.0, 2164.0], [409.0, 2272.5], [407.0, 4669.0], [406.0, 7586.0], [405.0, 1675.0], [404.0, 3962.2], [410.0, 1739.0], [411.0, 1938.0], [415.0, 2813.5], [414.0, 2298.0], [412.0, 8280.0], [403.0, 3013.0], [402.0, 5868.0], [401.0, 7683.0], [400.0, 3839.0], [408.0, 3559.2], [428.0, 2433.25], [417.0, 3339.0], [418.0, 1915.0], [419.0, 4477.5], [420.0, 4484.0], [421.0, 1992.0], [423.0, 6133.0], [416.0, 5614.666666666667], [422.0, 2387.0], [426.0, 4810.0], [427.0, 1667.5], [429.0, 3470.0], [431.0, 1884.1666666666667], [425.0, 4037.0], [424.0, 2936.5], [430.0, 2973.0], [447.0, 3877.0], [432.0, 1094.0], [433.0, 4736.75], [439.0, 4936.0], [437.0, 3555.4], [436.0, 3923.0], [434.0, 2296.0], [443.0, 3425.625], [446.0, 3247.4285714285716], [444.0, 3068.5], [435.0, 6534.0], [442.0, 5943.0], [441.0, 6005.0], [440.0, 4061.714285714286], [461.0, 2688.5], [463.0, 2184.5], [455.0, 2926.6666666666665], [458.0, 3431.0], [462.0, 3953.0], [460.0, 7257.0], [451.0, 5256.5], [450.0, 2089.0], [449.0, 4974.0], [448.0, 3562.666666666667], [459.0, 4662.25], [457.0, 5722.333333333333], [454.0, 6486.0], [453.0, 2214.6666666666665], [452.0, 5364.0], [478.0, 3902.0], [473.0, 4697.0], [474.0, 2349.25], [479.0, 2010.6666666666667], [477.0, 4986.0], [476.0, 4946.0], [475.0, 3442.0], [472.0, 2183.75], [471.0, 3774.0], [465.0, 3490.3333333333335], [467.0, 7494.0], [466.0, 5068.0], [470.0, 5048.0], [469.0, 5708.0], [468.0, 2078.0], [494.0, 3312.714285714286], [487.0, 2064.6], [481.0, 1755.5], [480.0, 2034.0], [483.0, 4132.666666666667], [482.0, 3965.5], [486.0, 1651.0], [485.0, 4583.0], [484.0, 2688.1666666666665], [489.0, 2499.5], [491.0, 1792.75], [492.0, 2885.0], [495.0, 3148.6], [493.0, 3185.8571428571427], [490.0, 3073.6], [488.0, 2115.0], [496.0, 2071.6666666666665], [500.0, 2357.206060606061], [499.0, 2552.8695652173915], [498.0, 2703.3846153846152], [497.0, 2414.5], [1.0, 18226.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[338.82258064516134, 3619.1137992831514]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2284.8, "minX": 1.60319172E12, "maxY": 104609.53333333334, "series": [{"data": [[1.60319172E12, 104609.53333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60319172E12, 2284.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319172E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3619.1137992831514, "minX": 1.60319172E12, "maxY": 3619.1137992831514, "series": [{"data": [[1.60319172E12, 3619.1137992831514]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319172E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2914.742831541216, "minX": 1.60319172E12, "maxY": 2914.742831541216, "series": [{"data": [[1.60319172E12, 2914.742831541216]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319172E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2023.2051971326189, "minX": 1.60319172E12, "maxY": 2023.2051971326189, "series": [{"data": [[1.60319172E12, 2023.2051971326189]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319172E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 418.0, "minX": 1.60319172E12, "maxY": 15445.0, "series": [{"data": [[1.60319172E12, 15445.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60319172E12, 538.4129966247082]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60319172E12, 543.3433003115654]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60319172E12, 542.0364996105433]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60319172E12, 418.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60319172E12, 2386.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319172E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 878.0, "minX": 1.0, "maxY": 18226.0, "series": [{"data": [[2.0, 15445.0], [136.0, 3257.5], [144.0, 3270.0], [39.0, 1189.0], [41.0, 1491.0], [163.0, 2096.0], [162.0, 1738.5], [44.0, 1042.5], [52.0, 1636.5], [15.0, 878.0], [75.0, 5736.0], [82.0, 2562.5], [23.0, 7394.5], [97.0, 3438.0], [7.0, 8587.0], [31.0, 5901.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 14383.0], [1.0, 18226.0], [75.0, 10722.0], [162.0, 10719.5], [23.0, 11469.0], [7.0, 11012.0], [31.0, 11166.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 8583.0, "series": [{"data": [[2.0, 7915.0], [136.0, 2031.5], [144.0, 2705.5], [39.0, 1094.0], [41.0, 1279.0], [163.0, 1694.0], [162.0, 1721.5], [44.0, 982.0], [52.0, 1295.0], [15.0, 878.0], [75.0, 5524.0], [82.0, 2058.5], [23.0, 7393.0], [97.0, 2804.0], [7.0, 8583.0], [31.0, 5250.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [1.0, 0.0], [75.0, 0.0], [162.0, 0.0], [23.0, 0.0], [7.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 163.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 18.6, "minX": 1.60319172E12, "maxY": 18.6, "series": [{"data": [[1.60319172E12, 18.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319172E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.60319172E12, "maxY": 18.133333333333333, "series": [{"data": [[1.60319172E12, 18.133333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60319172E12, 0.4666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60319172E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.60319172E12, "maxY": 18.133333333333333, "series": [{"data": [[1.60319172E12, 18.133333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60319172E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319172E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.60319172E12, "maxY": 18.133333333333333, "series": [{"data": [[1.60319172E12, 18.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60319172E12, 0.4666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60319172E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

